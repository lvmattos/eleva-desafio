# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '-c Release --runtime win10-x64 --self-contained false -o $(build.artifactstagingdirectory)/api'
    zipAfterPublish: false
    modifyOutputPath: false

- task: UseNode@1
  displayName: 'Use Node'
  inputs:
    checkLatest: true

- task: Npm@1
  displayName: 'Install @angular/cli'
  inputs:
    command: custom
    verbose: false
    customCommand: 'install @angular/cli@latest -g'
    workingDir: frontend/portal-escola

    
- task: Npm@1
  displayName: 'Install Dependencies'
  inputs:
    command: custom
    verbose: false
    customCommand: 'install'
    workingDir: frontend/portal-escola

    
- task: Npm@1
  displayName: 'Build client'
  inputs:
    command: custom
    verbose: false
    customCommand: 'run build-prod'
    workingDir: frontend/portal-escola

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    SourceFolder: frontend/portal-escola/dist
    TargetFolder: '$(build.artifactstagingdirectory)/web'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
    ArtifactName: drop